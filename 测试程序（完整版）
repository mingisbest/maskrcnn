#参考demo程序
#报错，len（images）must be equal to batch——size，改变config中gpu与image_per_gpu,相乘等于batch_size
#要用最新的weight。即最新的h5文件，保证训练的过程是完善的

import os
import sys
import random
import math
import numpy as np
import skimage.io
import matplotlib
import matplotlib.pyplot as plt
from mrcnn.config import Config
# Root directory of the project
ROOT_DIR = os.path.abspath("../")

# Import Mask RCNN
sys.path.append(ROOT_DIR)  # To find local version of the library
from mrcnn import utils
import mrcnn.model as modellib
from mrcnn import visualize
# Import COCO config
sys.path.append(os.path.join(ROOT_DIR, "samples/mydata/"))  # To find local version
#import coco

%matplotlib inline 

# Directory to save logs and trained model
MODEL_DIR = os.path.join(ROOT_DIR, "logs")

# Local path to trained weights file
COCO_MODEL_PATH = os.path.join(ROOT_DIR, "mask_rcnn_cat_0010.h5")
# Download COCO trained weights from Releases if needed
if not os.path.exists(COCO_MODEL_PATH):
    utils.download_trained_weights(COCO_MODEL_PATH)

# Directory of images to run detection on
IMAGE_DIR = os.path.join(ROOT_DIR, "images")
print(COCO_MODEL_PATH)


class ShapesConfig(Config):

    """Configuration for training on the toy shapes dataset.

    Derives from the base Config class and overrides values specific

    to the toy shapes dataset.

    """

    # Give the configuration a recognizable name

    NAME = "cat"

 

    # Train on 1 GPU and 8 images per GPU. We can put multiple images on each

    # GPU because the images are small. Batch size is 8 (GPUs * images/GPU).

    GPU_COUNT = 1

    IMAGES_PER_GPU = 1

 

    # Number of classes (including background)

    NUM_CLASSES = 1 + 1  # background + 1 shapes  注意这里我是4类，所以是4+1

 

    # Use small images for faster training. Set the limits of the small side

    # the large side, and that determines the image shape.

    IMAGE_MIN_DIM = 512

    IMAGE_MAX_DIM = 512

 

    # Use smaller anchors because our image and objects are small

    # RPN_ANCHOR_SCALES = (8 * 6, 16 * 6, 32 * 6, 64 * 6, 128 * 6)  # anchor side in pixels

    RPN_ANCHOR_SCALES = (16 * 6, 32 * 6, 64 * 6, 128 * 6, 256 * 6)    # 我的图片中目标比较大，所以我把anchor的尺寸也设置的大了一点

 

    # Reduce training ROIs per image because the images are small and have

    # few objects. Aim to allow ROI sampling to pick 33% positive ROIs.

    TRAIN_ROIS_PER_IMAGE = 100

 

    # Use a small epoch since the data is simple

    STEPS_PER_EPOCH = 50     #  每个epoch中迭代的step，最好不要改动

 

    # use small validation steps since the epoch is small

    VALIDATION_STEPS = 50

 

 

config = ShapesConfig()

config.display()


# Create model object in inference mode.
model = modellib.MaskRCNN(mode="inference", model_dir=MODEL_DIR, config=config)

# Load weights trained on MS-COCO
model.load_weights(COCO_MODEL_PATH, by_name=True)


# COCO Class names
# Index of the class in the list is its ID. For example, to get ID of
# the teddy bear class, use: class_names.index('teddy bear')
class_names = ['BG', 'cat']


# Load a random image from the images folder
#file_names = next(os.walk(IMAGE_DIR))[2]  #可以改为下边一行，但是图片数量要等于batch_size
image = skimage.io.imread("cat001.png")

# Run detection
results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], 
                            class_names, r['scores'])
